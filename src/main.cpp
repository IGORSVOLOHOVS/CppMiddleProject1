#include "cmd_options.h"
#include "crypto_guard_ctx.h"

#include <fstream>
#include <iostream>
#include <ostream>
#include <print>
#include <sstream>

// –ü—Ä–∏–≤–µ—Ç, –ò–≥–æ—Ä—å!
// –ü–æ–ª—É—á–∏–ª —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É. –ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã —É—á—ë–ª –º–Ω–æ–≥–∏–µ, –≤–∞–∂–Ω—ã–µ –¥–ª—è —Å–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã –Ω—é–∞–Ω—Å—ã üëç.
// –°–Ω–∞—á–∞–ª–∞ —Ö–æ—á—É –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ª–∏—á–Ω–æ —É–¥–∞–ª–∏—Å—å:
// –û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å using –∏ unique_ptr —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —É–¥–∞–ª–∏—Ç–µ–ª–µ–º –¥–ª—è OpenSSL —Ñ—É–Ω–∫—Ü–∏–π. –û—Ç–¥–µ–ª—å–Ω–æ —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞–ª, —á—Ç–æ –Ω–µ —Å—Ç–∞–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º, –≤–µ–¥—å –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ nullptr OpenSSL –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
// –•–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤ –∑–∞–¥–∞–Ω–∏–∏ —è–≤–Ω–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ, —Ç—ã —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –ø—Ä–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
// –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å std::array
// –ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ—à—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏, –∏ –∫–æ–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ OpenSSL —Ñ—É–Ω–∫—Ü–∏–π
// –ù–∞–∫–æ–Ω–µ—Ü, —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å —Ö–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ –∫–∞–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏, —Ç–∞–∫ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏!
// –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å OpenSSL –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥—É–º–∞–Ω–Ω—É—é –Ω–∞–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É CryptoGuard! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:

// –í –°++ –Ω–µ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–∏ —Å—Ç—Ä–æ–∫–∏
// –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∂–µ —É–¥–∞–ª—ë–Ω–Ω—ã–π –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ throw()
// –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª–∞—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ —Ç–µ—Å—Ç–∞—Ö
// –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã Parse
// –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
// –≤ main –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –±—É—Ñ–µ—Ä
// –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π —á—Ç–æ input != output - —Ç–∞–∫–æ–µ —á–∞—Å—Ç–æ –∑–∞–±—ã–≤–∞—é—Ç –∏ –≤–º–µ—Å—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–π –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å SEGFAULT
// –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
// –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ output/password
// –¢–∞–∫–∂–µ, —è –±—ã —Ö–æ—Ç–µ–ª –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –≤ –±—É–¥—É—â–µ–º:
// –≤ —Ç–µ—Å—Ç–∞—Ö –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ expected –∏ result
// –∏—Å–ø–æ–ª—å–∑—É–π –≥–æ–≤–æ—Ä—è—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π 1, 2, ...
// –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –ø–æ—Ç–æ–∫–æ–≤ –µ—Å—Ç—å 2 —Ñ–ª–∞–≥–∞ –ø–ª–æ—Ö–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: fail() –∏ bad(). –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–ª–∞–≥ fail() —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ "–ø–ª–æ—Ö–∏—Ö". –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–∑–Ω–∏—Ü–µ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç: https://en.cppreference.com/w/cpp/io/basic_ios/fail
// –û–¥–∏–Ω –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ C++ - [[nodiscard]], —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ, –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–º–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏. –í —Ç–≤–æ—ë–º –∫–æ–¥–µ —ç—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ Parse / CalculateChecksum. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç https://en.cppreference.com/w/cpp/language/attributes/nodiscard
// –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ç—ã –ø—Ä–æ–¥–µ–ª–∞–ª –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤! –ë–æ–ª–µ–µ —Ç–æ–≥–æ, –∫–æ–¥ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ C++.
// –£–¥–∞—á–∏!

std::string HexView(std::iostream& inStream){
    std::string output{};
    
    char c;
    while (inStream.get(c)) {
        output.append(std::format("{:x}", c));
    }

    return output;
}

int main(int argc, char *argv[]) {
    try {
        CryptoGuard::ProgramOptions options;
        options.Parse(argc, argv);

        CryptoGuard::CryptoGuardCtx cryptoCtx;

        auto const inputStr = options.GetInputFile();
        auto const outputStr = options.GetOutputFile();
        auto const password = options.GetPassword();

        using COMMAND_TYPE = CryptoGuard::ProgramOptions::COMMAND_TYPE;
        switch (options.GetCommand()) {
        case COMMAND_TYPE::ENCRYPT:
        {
            // Open input file
            std::fstream inStream(inputStr, std::ios::in);
            if (!inStream.is_open()) {
                throw std::runtime_error(std::format("Open file error: {}", inputStr));
            }
           
            std::stringstream outStream;
            cryptoCtx.EncryptFile(inStream, outStream, password);
            
            // Open output file
            std::fstream outStreamFile(outputStr, std::ios::out);
            if (!outStreamFile.is_open()) {
                throw std::runtime_error(std::format("Open file error: {}", outputStr));
            }
            outStreamFile << outStream.str();

            // Encrypt file

            std::print("Input file {} was encrypted successfuly in output file {}.\n", inputStr, outputStr);
            std::print("Result: {}\n", HexView(outStream));
            break;
        }
        case COMMAND_TYPE::DECRYPT:
        {
            // Open input file
            std::fstream inStream(inputStr, std::ios::in);
            if (!inStream.is_open()) {
                throw std::runtime_error(std::format("Open file error: {}", inputStr));
            }
           
            std::stringstream outStream;
            cryptoCtx.DecryptFile(inStream, outStream, password);
            
            // Open output file
            std::fstream outStreamFile(outputStr, std::ios::out);
            if (!outStreamFile.is_open()) {
                throw std::runtime_error(std::format("Open file error: {}", outputStr));
            }
            outStreamFile << outStream.str();

            std::print("Input file {} was decrypted successfuly in output file {}.\n", inputStr, outputStr);
            std::print("Result: {}\n", outStream.str());
            break;
        }
        case COMMAND_TYPE::CHECKSUM:
        {
            // Open input file
            std::fstream inStream(inputStr, std::ios::in);
            if (!inStream.is_open()) {
                throw std::runtime_error(std::format("Open file error: {}", inputStr));
            }

            // Calculate checksum
            auto const checkSum = cryptoCtx.CalculateChecksum(inStream);

            std::print("Check sum of input file {} was calculated successfuly.\n", inputStr);
            std::print("Result: {}\n", checkSum);
            break;
        }

        default:
            throw std::runtime_error{"Unsupported command"};
        }

    } catch (const std::exception &e) {
        std::print(std::cerr, "Error: {}\n", e.what());
        return 1;
    }

    return 0;
}